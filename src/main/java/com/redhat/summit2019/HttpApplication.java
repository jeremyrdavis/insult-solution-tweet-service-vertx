package com.redhat.summit2019;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Future;
import io.vertx.core.http.HttpServerResponse;
import io.vertx.core.json.Json;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.StaticHandler;
import io.vertx.ext.web.client.WebClient;

import static io.vertx.core.http.HttpHeaders.CONTENT_TYPE;

import java.time.Instant;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public class HttpApplication extends AbstractVerticle {

  Map<Integer, JsonObject> processedTweets = new HashMap<>();

  WebClient webClient;

  JsonObject config;


  static final String template = "Hello, %s!";
    // Create a router object.
    Router router = Router.router(vertx);


    @Override
    public void start(Future<Void> startFuture) {
  
      webClient = WebClient.create(vertx);
  
      Router apiRouter = Router.router(vertx);
      apiRouter.get("/api/greeting").handler(this::greeting);
      apiRouter.post("/tweet").handler(this::tweetHandler);
      apiRouter.get("/*").handler(StaticHandler.create());
  
  
      vertx.deployVerticle(new TwitterVerticle(), ar -> {
        if (ar.succeeded()) {
          vertx
            .createHttpServer()
            .requestHandler(apiRouter::accept)
            .listen(8080, result -> {
              if (result.succeeded()) {
                startFuture.complete();
              } else {
                startFuture.fail(result.cause());
              }
            });
        }else{
          startFuture.fail(ar.cause());
        }
      });
  
    }
  
  private void tweetHandler(RoutingContext routingContext) {

    System.out.println("tweetHandler");

    JsonObject requestJson = routingContext.getBodyAsJson();

    System.out.println("request payload:\n" + requestJson);

    String tweetText = new StringBuilder()
      .append(requestJson.getString("text"))
      .append(" - Generated by the Red Hat Summit Shakespearean Insult Workshop at ")
      .append(Date.from(Instant.now()).getTime()).toString();

    System.out.println("status:\n" + tweetText);

    JsonObject message = new JsonObject()
      .put(EventBusConstants.MESSAGE_KEY, new JsonObject()
        .put(EventBusConstants.ACTION, EventBusConstants.ACTIONS_STATUS_UPDATE)
        .put(EventBusConstants.PARAMETERS_STATUS, tweetText));

    System.out.println("message:\n" + message);

    vertx.<JsonObject>eventBus().send(EventBusConstants.ADDRESS, message, ar -> {
      if (ar.succeeded()) {
        processedTweets.put(requestJson.getInteger("id"), message);
        processedTweets.forEach((k,v) -> System.out.println("key: " + k + "value: " + v));
        HttpServerResponse response = routingContext.response();
        response
          .putHeader("Content-Type", "application/json")
          .end(Json.encodePrettily(new JsonObject().put("outcome", "success").put("status", tweetText)));
      } else {
        HttpServerResponse response = routingContext.response();
        response
          .putHeader("Content-Type", "application/json")
          .end(new JsonObject().put("error", ar.cause().getMessage()).toBuffer());
      }
    });
  }


  private void greeting(RoutingContext rc) {
    String name = rc.request().getParam("name");
    if (name == null) {
      name = "World";
    }

    JsonObject response = new JsonObject()
        .put("content", String.format(template, name));

    rc.response()
        .putHeader(CONTENT_TYPE, "application/json; charset=utf-8")
        .end(response.encodePrettily());
  }
}